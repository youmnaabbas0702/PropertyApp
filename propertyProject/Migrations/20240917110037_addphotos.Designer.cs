// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using propertyProject.Data;

#nullable disable

namespace propertyProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240917110037_addphotos")]
    partial class addphotos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("propertyProject.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Email = "Admin11.EasyStay@gmail.com",
                            Password = "admin11#*33"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            Email = "Admin22.EasyStay@gmail.com",
                            Password = "admin22#*44"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            Email = "Admin33.EasyStay@gmail.com",
                            Password = "admin33#*55"
                        });
                });

            modelBuilder.Entity("propertyProject.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Sadat"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Shebin Elkom"
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Menouf"
                        });
                });

            modelBuilder.Entity("propertyProject.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("propertyProject.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RoomsAvailable")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("propertyProject.Models.PropertyService", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PropertyServices");
                });

            modelBuilder.Entity("propertyProject.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wi-Fi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electricity"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Elevator"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fans"
                        },
                        new
                        {
                            Id = 6,
                            Name = "TV"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Water Filter"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cleaning Services"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fire Safety"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Garbage Disposal"
                        });
                });

            modelBuilder.Entity("propertyProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("propertyProject.Models.Admin", b =>
                {
                    b.HasOne("propertyProject.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("propertyProject.Models.Image", b =>
                {
                    b.HasOne("propertyProject.Models.Property", "Property")
                        .WithMany("GalleryImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("propertyProject.Models.Property", b =>
                {
                    b.HasOne("propertyProject.Models.City", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("propertyProject.Models.PropertyService", b =>
                {
                    b.HasOne("propertyProject.Models.Property", "Property")
                        .WithMany("PropertyServices")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("propertyProject.Models.Service", "Service")
                        .WithMany("PropertyServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("propertyProject.Models.User", b =>
                {
                    b.HasOne("propertyProject.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("propertyProject.Models.City", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("propertyProject.Models.Property", b =>
                {
                    b.Navigation("GalleryImages");

                    b.Navigation("PropertyServices");
                });

            modelBuilder.Entity("propertyProject.Models.Service", b =>
                {
                    b.Navigation("PropertyServices");
                });
#pragma warning restore 612, 618
        }
    }
}
